// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

ext {
    compileSdkVersion = 29
    supportVersion = "28.0.0"
    minSdkVersion = 9
    targetSdkVersion = 29
}

// 复制下载的so文件到module目录中去
task copySoFilesToModules {
    final sourceRootDir = file('../BaiduLBS_AndroidSDK/BaiduLBS_AndroidSDK_Lib_GP_with_indoor/')
    final abiList = ['armeabi', 'x86', 'arm64-v8a', 'armeabi-v7a', 'x86_64']
    final moduleFiles = [
            'base'           : [
                    'libBaiduMapSDK_base_v7_5_5.so',
                    'libgnustl_shared.so',
                    'libtiny_magic.so',
            ],
            'map'            : [
                    'libBaiduMapSDK_map_v7_5_5.so'
            ],
            'location'       : [
                    'liblocSDK8b.so',
            ],
            'location-indoor': [
                    'libindoor.so',
            ]
    ]

    moduleFiles.each { module, files ->
        abiList.each { abi ->
            final sourceDir = new File(sourceRootDir, "libs/$abi/")
            final targetDir = new File(module, "libs/$abi/")
            // 清空并重建目标目录
            targetDir.deleteDir()
            targetDir.mkdirs()

            files.each { fileName ->
                final source = new File(sourceDir, fileName)
                final target = new File(targetDir, fileName)

                if (source.exists()) {
                    logger.info("$source => $target")
                    java.nio.file.Files.copy(source.toPath(), target.toPath())
                } else {
                    logger.warn("$source not exist.")
                }
            }

        }
    }
}