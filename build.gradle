// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

ext {
    compileSdkVersion = 29
    supportVersion = "28.0.0"
    minSdkVersion = 9
    targetSdkVersion = 29
}

// 复制下载的so文件到module目录中去
task copySoFilesToModules {
    doLast {
        final sourceRootDirs = [
                file('../BaiduLBS_AndroidSDK/BaiduLBS_AndroidSDK_Lib_GP_map_full/'),
                file('../BaiduLBS_AndroidSDK/BaiduLBS_AndroidSDK_Lib_GP_with_indoor/'),
        ]

        final abiList = ['armeabi', 'x86', 'arm64-v8a', 'armeabi-v7a', 'x86_64']
        final moduleFiles = [
                'base'           : [
                        'libBaiduMapSDK_base_v7_5_5.so',
                        'libgnustl_shared.so',
                        'libtiny_magic.so',
                ],
                'map'            : [
                        'libBaiduMapSDK_map_v7_5_5.so'
                ],
                'location'       : [
                        'liblocSDK8b.so',
                ],
                'location-indoor': [
                        'libindoor.so',
                ],
                'bikenavi'       : [
                        'libBaiduMapSDK_map_for_bikenavi_v7_5_5.so',
                ]
        ]

        final copyFile = { File source, File target ->
            logger.info("\t$source => $target")
            java.nio.file.Files.copy(source.toPath(), target.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING)
        }

        sourceRootDirs.each { sourceRootDir ->
            moduleFiles.each { module, files ->
                final moduleLibsDir = new File(module, "libs")
                def moduleLibsDirRecreated = false
                abiList.each { abi ->
                    final sourceDir = new File(sourceRootDir, "libs/$abi/")
                    final targetDir = new File(moduleLibsDir, abi)
                    files.each { fileName ->
                        final source = new File(sourceDir, fileName)
                        final target = new File(targetDir, fileName)

                        if (source.exists()) {
                            if (!moduleLibsDirRecreated) {
                                logger.quiet("process ${sourceRootDir.name} => $module")
                                // 清空module的libs目录
                                moduleLibsDir.deleteDir()
                                copyFile(
                                        new File(sourceRootDir, 'readme.txt'),
                                        new File(module, 'readme.txt'),
                                )
                                moduleLibsDirRecreated = true
                            }
                            if (!targetDir.exists() && !targetDir.mkdirs()) {
                                throw new IOException("Create $targetDir failed.")
                            }
                            copyFile(source, target)
                        }
                    }

                }
            }
        }
    }
}